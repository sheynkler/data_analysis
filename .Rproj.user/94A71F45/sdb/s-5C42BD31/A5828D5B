{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(cluster)\n# source(\"functions.R\")\noptions(shiny.maxRequestSize = 9 * 1024 ^ 2)\n#source(\"server_functions.R\")\n\nshinyServer(function(input, output, session) {\n  \n  \n  # INPUT\n  \n\n\n  observe({\n    if (input$submit > 0) {\n      shinyjs::toggle(id = \"enter\", anim = TRUE)\n    }\n  })\n  output$myFileUI <- renderUI({\n    input$clear\n    input$uploadFormat\n    fileInput(\n      'file1',\n      ' ',\n      accept = c(\n        'text/csv',\n        'text/comma-separated-values',\n        'text/tab-separated-values',\n        'text/plain',\n        '.csv',\n        '.tsv'\n      )\n    )\n  })\n  test_data <- reactive({\n    print(input$file1)\n    if (input$tabs == \"demo\") {\n      inFileString <- input$selectDemoData\n      if (inFileString == \"\")\n        return(NULL)\n      test_data <- eval(as.symbol(inFileString))\n    }\n    \n    \n    else {\n      inFile <- input$file1\n      if (is.null(inFile))\n        return(NULL)\n      test_data <- read.csv(\n        inFile$datapath,\n        header = input$header,\n        sep = input$sep,\n        dec = input$dec,\n        quote = input$quote\n      )\n    }\n    \n    \n    test_data\n    \n    \n  })\n  \n  # HANDLING\n  \n  temp_data <- reactive({\n    temp_data <- test_data()\n    \n    if (is.null(input$dependet_pro))\n      return(temp_data)\n    names_all <- c(input$undependet_pro, input$dependet_pro)\n    names_temp_data <- names(temp_data)\n    names_off <-\n      names_temp_data[names_temp_data %in% names_all == F]\n    temp_data[, names(temp_data) %in% names_all == T]\n    \n  })\n  output$dependent <- renderUI({\n    if(is.null(test_data())) return(NULL)\n    nams <- names(test_data())\n    radioButtons('dependet_pro', 'Dependent variable', choices = as.list(nams))\n  })\n  output$undependent <- renderUI({\n    if(is.null(test_data())) return(NULL)\n    nams <- names(test_data())\n    dependet <- input$dependet_pro\n    nams <- nams[nams %in% dependet == F]\n    checkboxGroupInput('undependet_pro', 'Undependent variable', choices = as.list(nams), selected = nams)\n  })\n  # OUTPUT DATA\n  \n  output$contents <- renderDataTable({\n    temp_data <- temp_data()\n    if (is.null(temp_data))\n      return(temp_data)\n    if (class(temp_data) == \"data.frame\" &\n        is.null(temp_data) == F)\n      temp_data\n    \n    \n  })\n  output$plotMatrix <- renderPlot({\n    if (is.null(temp_data()))\n      return(NULL)\n    nams <- names(temp_data())\n    \n    \n    nams <- paste(nams, collapse = \"+\")\n    nams <- paste0(\"~\", nams)\n    nams <- as.formula(nams)\n    \n    pairs(nams, data = temp_data(),  main = \"Simple Scatterplot Matrix\", col = \"blue\")\n    \n  })\n  temp_data_numeric <- reactive({\n    if (is.null(temp_data()))\n      return(NULL)\n    temp_data <- temp_data()\n    \n    for (j in ncol(temp_data):1) {\n      if (class(temp_data[, j]) %in% num_classes == F)\n        temp_data <- temp_data[,-j]\n    }\n    temp_data\n  })\n  output$data_titel <- renderText({ \n    inFileString <- input$selectDemoData\n    if (inFileString == \"\")\n      return(NULL)\n    as.character(dates_data_frame$Title[ dates_data_frame$Item == input$selectDemoData])\n    \n})\n  output$summary <- renderPrint(summary(temp_data()))\n  output$str <- renderPrint(str(temp_data()))\n  output$korr <- renderPrint({\n    temp_data <- temp_data_numeric()\n    \n    \n    if (input$cor_cov == 1)\n      cor(temp_data)\n    else\n      cov(temp_data)\n  })\n  output$simple_scatter <- renderUI({\n    checkboxGroupInput(\n      \"simple_scatter_names\",\n      label = (\"change variable\"),\n      inline = T,\n      choices = as.list(c(names(temp_data(\n        \n      )))),\n      selected = names(temp_data())[1:2]\n    )\n    \n    \n  })\n  output$hist_change_names_ui <- renderUI({\n    temp_data <- temp_data_numeric()\n    \n    \n    \n    radioButtons(\n      \"hist_change_names\",\n      label = (\"change variable\"),\n      inline = T,\n      choices = as.list(c(names(temp_data))),\n      selected = names(temp_data)[1]\n    )\n    \n    \n  })\n  output$hist_plot <- renderPlot({\n    if (is.null(temp_data_numeric()))\n      return(NULL)\n    temp_data <- temp_data_numeric()\n    \n    nams <- input$hist_change_names\n    \n    hist(\n      temp_data[, nams],\n      main = paste(\"Histogram of\", nams),\n      xlab = nams,  col = \"blue\",\n      probability = input$hist_probability\n    )\n    if(input$hist_probability) lines(density(temp_data[, nams]), col = \"green\", lwd = 3)\n    \n    \n    \n  })\n  output$simple_scatter_plot <- renderPlot({\n    if (is.null(temp_data()))\n      return(NULL)\n    temp_data <- temp_data()\n    nams <- input$simple_scatter_names\n    if (input$simple_scatter_names_change) {\n      nams1 <- nams[1]\n      nams2 <- nams[2]\n    }\n    else{\n      nams1 <- nams[2]\n      nams2 <- nams[1]\n    }\n    \n    if (length(nams) != 2)\n      return(NULL)\n    else\n      if(input$ggplot2){\n        c <- ggplot(temp_data, aes_string(nams1, nams2))\n        c + stat_smooth(method = \"lm\") + geom_point() +  ggtitle(paste(nams1, \"vs\", nams2))\n      }\n    else{\n            plot(\n        temp_data[, nams1],\n        temp_data[, nams2],\n        main = paste(nams1, \"vs\", nams2),\n        xlab = nams1,\n        ylab = nams2,\n        col = \"blue\",\n        pch = 19\n      )\n    }\n      \n\n    \n    \n    \n  })\n  \n  # REGRESSIA\n  \n  lm_fit <- reactive({\n        if(is.null(temp_data())) return(NULL)\n    \n    temp_data <- temp_data()\n    dependent_ <-  input$dependet_pro\n    ss <- paste(dependent_, \"~ .\")\n    \n    formula_ <- as.formula(ss)\n    \n    lm(formula_, data = temp_data)\n  })\n  output$summary_lm <- renderPrint({\n    summary(lm_fit())\n    \n  })\n  output$diagnostic_Plot <- renderPlot({\n    fit <- lm_fit()\n    #layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page\n    plot(fit,  which = as.integer(input$select_diagnostic_Plot))\n  })\n  \n  # CLUSTER\n  \n  cluster_data <- reactive({\n    if(is.null(temp_data_numeric())) return(NULL)\n    mydata <- na.omit(temp_data_numeric()) \n    #mydata <- scale(mydata) \n    mydata\n  })\n  scale_cluster_data <- reactive({\n    if(is.null(cluster_data())) return(NULL)\n    #mydata <- na.omit(temp_data_numeric()) \n    mydata <- scale(cluster_data()) \n    mydata\n  })\n  Hierarchical_cluster_fit <- reactive({\n    if(input$cluster_scale) mydata <- scale_cluster_data()\n    else mydata <- cluster_data()\n    # Ward Hierarchical Clustering\n    d <- dist(mydata, method = \"euclidean\") \n    fit <- hclust(d, method=\"ward.D2\")\n    fit\n  })\n  output$cluster_plot <- renderPlot({\n    plot(Hierarchical_cluster_fit())\n  })\n  output$cluster_center <- renderPrint({\n    groups <- cutree(Hierarchical_cluster_fit(), k=input$number_clusters)\n    aggregate(cluster_data(),by=list(groups),FUN=mean)\n  } )\n  output$number_of_clusters <- renderPlot({\n    if(input$cluster_scale) mydata <- scale_cluster_data()\n    else mydata <- cluster_data()\n    wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))\n    for (i in 2:15) wss[i] <- sum(kmeans(mydata,\n                                         centers=i)$withinss)\n    plot(1:15, wss, type=\"b\", xlab=\"Number of Clusters\",\n         ylab=\"Within groups sum of squares\") \n  })\n  part_cluster_fit <- reactive({\n    if(input$cluster_scale) mydata <- scale_cluster_data()\n    else mydata <- cluster_data()\n    fit <- kmeans(mydata, input$number_clusters)\n\n    fit\n  })\n  output$part_cluster_center <- renderPrint({\n    fit <- part_cluster_fit()\n    aggregate(cluster_data(), by=list(fit$cluster),FUN=mean)\n    \n  })\n  output$part_cluster_plot <- renderPlot({\n    fit <- part_cluster_fit()\n    clusplot(cluster_data(), fit$cluster, color=TRUE, shade=TRUE,\n             labels=2, lines=0)\n  })\n\n\n  \n  \n})\n",
    "created" : 1475330717358.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "762656595",
    "id" : "A5828D5B",
    "lastKnownWriteTime" : 1473244375,
    "last_content_update" : 1473244375,
    "path" : "~/data_analysis/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}